name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  doctorstaff-ms-build:
    name: Build and Test Doctorstaff Microservice
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      #- name: Build Doctorstaff Microservice
       # working-directory: backend/doctorstaff-ms  # assuming it's located in backend/messaging-ms
        #run: mvn clean install -DskipTests

      - name: Run Doctorstaff Microservice Tests
        working-directory: backend/doctorstaff-ms
        run: mvn test

      # Build Messaging Microservice Docker Image only if tests succeed
      - name: Build Doctorstaff Microservice Docker Image
        working-directory: backend/doctorstaff-ms
        if: success()  # Only run if the previous step (tests) succeeded
        run: docker build -t doctorstaff-ms:latest .

  image-ms-build:
    name: Build and Test Image Microservice
    runs-on: ubuntu-latest
    needs: doctorstaff-ms-build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'  # Use the version of Node.js that your project requires

      - name: Ensure Jest has executable permissions
        working-directory: backend/image-ms
        run: chmod +x node_modules/.bin/jest

      - name: Install Dependencies for Image Microservice
        working-directory: backend/image-ms
        run: npm install

      - name: Run Image Microservice Tests
        working-directory: backend/image-ms
        run: npm test

      # Build Image Microservice Docker Image only if tests succeed
      - name: Build Image Microservice Docker Image
        working-directory: backend/image-ms
        if: success()  # Only run if the previous step (tests) succeeded
        run: docker build -t image-ms:latest .

  messaging-ms-build:
    name: Build and Test Messaging Microservice
    runs-on: ubuntu-latest
    needs: image-ms-build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Messaging Microservice
        working-directory: backend/messaging-ms  # assuming it's located in backend/messaging-ms
        run: mvn clean install -DskipTests

      - name: Run Messaging Microservice Tests
        working-directory: backend/messaging-ms
        run: mvn test

      # Build Messaging Microservice Docker Image only if tests succeed
      - name: Build Messaging Microservice Docker Image
        working-directory: backend/messaging-ms
        if: success()  # Only run if the previous step (tests) succeeded
        run: docker build -t messaging-ms:latest .


  patient-ms-build:
    name: Build and Test Patient Microservice
    runs-on: ubuntu-latest
    needs: messaging-ms-build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Patient Microservice
        working-directory: backend/patient-ms  # assuming it's located in backend/messaging-ms
        run: mvn clean install -DskipTests

      - name: Run Patient Microservice Tests
        working-directory: backend/patient-ms
        run: mvn test

      # Build Patient Microservice Docker Image only if tests succeed
      - name: Build Patient Microservice Docker Image
        working-directory: backend/patient-ms
        if: success()  # Only run if the previous step (tests) succeeded
        run: docker build -t patient-ms:latest .

  user-ms-build:
    name: Build and Test User Microservice
    runs-on: ubuntu-latest
    needs: patient-ms-build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build User Microservice
        working-directory: backend/user-ms  # assuming it's located in backend/messaging-ms
        run: mvn clean install -DskipTests

      - name: Run User Microservice Tests
        working-directory: backend/user-ms
        run: mvn test

      # Build User Microservice Docker Image only if tests succeed
      - name: Build User Microservice Docker Image
        working-directory: backend/user-ms
        if: success()  # Only run if the previous step (tests) succeeded
        run: docker build -t user-ms:latest .
  #backend-build:
   # name: Build Backend
  #  runs-on: ubuntu-latest

   # steps:
     # - name: Checkout Code
     #   uses: actions/checkout@v3

      # Ensure Docker Compose is available
    #  - name: Set up Docker Compose
     #   run: |
         # sudo apt-get update
         # sudo apt-get install -y docker-compose

      # Build Docker images using Docker Compose
     # - name: Build Backend Docker Compose Services
      #  working-directory: backend
      #  run: docker-compose build

      # Optionally, you can also push images to a registry (if needed)
      # - name: Push Backend Docker Images
      #   run: docker-compose push

  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: user-ms-build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Frontend Docker Image
        working-directory: frontend
        run: docker build -t frontend:latest .

 # docker:
   # name: Test Docker Containers
   # runs-on: ubuntu-latest
   # needs: [backend-build, frontend-build]

   # steps:
    #  - name: Checkout Code
     #   uses: actions/checkout@v3

      # Ensure Docker Compose is available in this job as well
     # - name: Set up Docker Compose
      #  run: |
     #     sudo apt-get update
     #     sudo apt-get install -y docker-compose

      # Start backend and frontend containers using Docker Compose
     # - name: Run Backend and Frontend Containers with Docker Compose
      #  working-directory: backend
      #  run: docker-compose up -d

      # Verify that both containers are running
    #  - name: Verify Backend and Frontend Containers Are Running
    #    run: |
     #     docker ps
