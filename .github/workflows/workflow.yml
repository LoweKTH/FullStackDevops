name: CI/CD Pipeline

on:
  push:
    branches:

jobs:

  build-and-test:
    name: Build, Test, and Deploy Services
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Create a shared Docker network
      - name: Create Docker Network
        run: docker network create app_network

      # Step 3: Test and Build Doctorstaff Microservice container
      - name: Test and Build Doctorstaff Microservice
        run: |
          # Run tests for Doctorstaff microservice
          cd backend/doctorstaff-ms
          mvn clean test -DskipTests=false
          # Build the Docker image
          docker build -t doctorstaff-ms .
          docker run -d --name doctorstaff-container --network app_network doctorstaff-ms

      # Step 4: Test and Build Messaging Microservice container
      - name: Test and Build Messaging Microservice
        run: |
          # Run tests for Messaging microservice
          cd backend/messaging-ms
          mvn clean test -DskipTests=false
          # Build the Docker image
          docker build -t messaging-ms .
          docker run -d --name messaging-container --network app_network messaging-ms

      # Step 5: Test and Build Patient Microservice container
      - name: Test and Build Patient Microservice
        run: |
          # Run tests for Patient microservice
          cd backend/patient-ms
          mvn clean test -DskipTests=false
          # Build the Docker image
          docker build -t patient-ms .
          docker run -d --name patient-container --network app_network patient-ms

      # Step 6: Test and Build Image Microservice container
      - name: Test and Build Image Microservice
        run: |
          # Run tests for Image microservice
          cd backend/image-ms
          npm install
          npm test
          # Build the Docker image
          docker build -t image-ms .
          docker run -d --name image-container --network app_network image-ms

      # Step 7: Test and Build Frontend container
      - name: Test and Build Frontend
        run: |
          # Run tests for Frontend
          cd frontend
          npm install
          npm test
          # Build the Docker image
          docker build -t frontend .
          docker run -d --name frontend-container --network app_network frontend

      # Step 8: Test communication between Doctorstaff and Messaging Microservices
      - name: Test Communication Between Doctorstaff and Messaging
        run: docker exec doctorstaff-container curl -f http://messaging-container:8080/api/health

      # Step 9: Test communication between Frontend and Backend
      - name: Test Frontend to Backend Communication
        run: docker exec frontend-container curl -f http://doctorstaff-container:8080/api/health

      # Step 10: Push all images to the Docker registry
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cloud.cbh.kth.se
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Doctorstaff Microservice
        run: |
          docker tag doctorstaff-ms ${{ secrets.DOCKER_TAG }}/doctorstaff-ms
          docker push ${{ secrets.DOCKER_TAG }}/doctorstaff-ms

      - name: Push Messaging Microservice
        run: |
          docker tag messaging-ms ${{ secrets.DOCKER_TAG }}/messaging-ms
          docker push ${{ secrets.DOCKER_TAG }}/messaging-ms

      - name: Push Patient Microservice
        run: |
          docker tag patient-ms ${{ secrets.DOCKER_TAG }}/patient-ms
          docker push ${{ secrets.DOCKER_TAG }}/patient-ms

      - name: Push Image Microservice
        run: |
          docker tag image-ms ${{ secrets.DOCKER_TAG }}/image-ms
          docker push ${{ secrets.DOCKER_TAG }}/image-ms

      - name: Push Frontend
        run: |
          docker tag frontend ${{ secrets.DOCKER_TAG }}/frontend
          docker push ${{ secrets.DOCKER_TAG }}/frontend
